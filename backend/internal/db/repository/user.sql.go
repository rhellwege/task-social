// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package repository

import (
	"context"
	"time"
)

const createFriend = `-- name: CreateFriend :exec
INSERT INTO user_friendship (user_id, friend_id)
VALUES (?, ?)
`

type CreateFriendParams struct {
	UserID   string `json:"user_id"`
	FriendID string `json:"friend_id"`
}

func (q *Queries) CreateFriend(ctx context.Context, arg CreateFriendParams) error {
	_, err := q.db.ExecContext(ctx, createFriend, arg.UserID, arg.FriendID)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO user (id, email, username, password)
VALUES (?, ?, ?, ?)
`

type CreateUserParams struct {
	ID       string `json:"id"`
	Email    string `json:"email"`
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Username,
		arg.Password,
	)
	return err
}

const deleteFriend = `-- name: DeleteFriend :exec
DELETE FROM user_friendship
WHERE user_id = ? AND friend_id = ?
`

type DeleteFriendParams struct {
	UserID   string `json:"user_id"`
	FriendID string `json:"friend_id"`
}

// assumes user_id < friend_id
func (q *Queries) DeleteFriend(ctx context.Context, arg DeleteFriendParams) error {
	_, err := q.db.ExecContext(ctx, deleteFriend, arg.UserID, arg.FriendID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM user WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getFriends = `-- name: GetFriends :many
SELECT u.username, u.profile_picture, u.id FROM user u WHERE u.id IN (
    SELECT friend_id FROM user_friendship f WHERE f.user_id = ?1
    UNION
    SELECT user_id FROM user_friendship f WHERE f.friend_id = ?1
)
`

type GetFriendsRow struct {
	Username       string  `json:"username"`
	ProfilePicture *string `json:"profile_picture"`
	ID             string  `json:"id"`
}

// assumes user_id < friend_id
func (q *Queries) GetFriends(ctx context.Context, id string) ([]GetFriendsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFriends, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFriendsRow
	for rows.Next() {
		var i GetFriendsRow
		if err := rows.Scan(&i.Username, &i.ProfilePicture, &i.ID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserDisplay = `-- name: GetUserDisplay :one
SELECT username, profile_picture, created_at
FROM user
WHERE id = ?
`

type GetUserDisplayRow struct {
	Username       string    `json:"username"`
	ProfilePicture *string   `json:"profile_picture"`
	CreatedAt      time.Time `json:"created_at"`
}

func (q *Queries) GetUserDisplay(ctx context.Context, id string) (GetUserDisplayRow, error) {
	row := q.db.QueryRowContext(ctx, getUserDisplay, id)
	var i GetUserDisplayRow
	err := row.Scan(&i.Username, &i.ProfilePicture, &i.CreatedAt)
	return i, err
}

const getUserLogin = `-- name: GetUserLogin :one
SELECT id, email, username, password
FROM user
WHERE username = ?
`

type GetUserLoginRow struct {
	ID       string `json:"id"`
	Email    string `json:"email"`
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) GetUserLogin(ctx context.Context, username string) (GetUserLoginRow, error) {
	row := q.db.QueryRowContext(ctx, getUserLogin, username)
	var i GetUserLoginRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
	)
	return i, err
}

const updateUserEmail = `-- name: UpdateUserEmail :exec
UPDATE user SET email = ? WHERE id = ?
`

type UpdateUserEmailParams struct {
	Email string `json:"email"`
	ID    string `json:"id"`
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateUserEmail, arg.Email, arg.ID)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE user SET password = ? WHERE id = ?
`

type UpdateUserPasswordParams struct {
	Password string `json:"password"`
	ID       string `json:"id"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.Password, arg.ID)
	return err
}

const updateUserProfilePicture = `-- name: UpdateUserProfilePicture :exec
UPDATE user SET profile_picture = ? WHERE id = ?
`

type UpdateUserProfilePictureParams struct {
	ProfilePicture *string `json:"profile_picture"`
	ID             string  `json:"id"`
}

func (q *Queries) UpdateUserProfilePicture(ctx context.Context, arg UpdateUserProfilePictureParams) error {
	_, err := q.db.ExecContext(ctx, updateUserProfilePicture, arg.ProfilePicture, arg.ID)
	return err
}
