// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user.sql

package repository

import (
	"context"
	"time"
)

const createFriend = `-- name: CreateFriend :exec
INSERT INTO user_friendship (user_id, friend_id)
VALUES (?, ?)
`

type CreateFriendParams struct {
	UserID   string `json:"user_id"`
	FriendID string `json:"friend_id"`
}

func (q *Queries) CreateFriend(ctx context.Context, arg CreateFriendParams) error {
	_, err := q.db.ExecContext(ctx, createFriend, arg.UserID, arg.FriendID)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO user (id, email, username, password)
VALUES (?, ?, ?, ?)
`

type CreateUserParams struct {
	ID       string `json:"id"`
	Email    string `json:"email"`
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Username,
		arg.Password,
	)
	return err
}

const deleteFriend = `-- name: DeleteFriend :exec
DELETE FROM user_friendship
WHERE user_id = ? AND friend_id = ?
`

type DeleteFriendParams struct {
	UserID   string `json:"user_id"`
	FriendID string `json:"friend_id"`
}

// assumes user_id < friend_id
func (q *Queries) DeleteFriend(ctx context.Context, arg DeleteFriendParams) error {
	_, err := q.db.ExecContext(ctx, deleteFriend, arg.UserID, arg.FriendID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM user WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getFriends = `-- name: GetFriends :many
SELECT u.username, u.profile_picture, u.id  FROM user u WHERE u.id IN (
    SELECT friend_id FROM user_friendship f WHERE f.user_id = ?1
    UNION
    SELECT user_id FROM user_friendship f WHERE f.friend_id = ?1
)
`

type GetFriendsRow struct {
	Username       string  `json:"username"`
	ProfilePicture *string `json:"profile_picture"`
	ID             string  `json:"id"`
}

// assumes user_id < friend_id
// TODO: add user friendship created at
func (q *Queries) GetFriends(ctx context.Context, id string) ([]GetFriendsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFriends, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFriendsRow
	for rows.Next() {
		var i GetFriendsRow
		if err := rows.Scan(&i.Username, &i.ProfilePicture, &i.ID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserClubs = `-- name: GetUserClubs :many
SELECT
    c.id AS club_id, c.name,
    c.description, c.created_at,
    c.banner_image, cm.user_points,
    cm.user_streak, cm.created_at AS joined_at
FROM club c
JOIN club_membership cm ON c.id = cm.club_id
WHERE cm.user_id = ?1
ORDER BY cm.created_at DESC
`

type GetUserClubsRow struct {
	ClubID      string    `json:"club_id"`
	Name        string    `json:"name"`
	Description *string   `json:"description"`
	CreatedAt   time.Time `json:"created_at"`
	BannerImage *string   `json:"banner_image"`
	UserPoints  float64   `json:"user_points"`
	UserStreak  int64     `json:"user_streak"`
	JoinedAt    time.Time `json:"joined_at"`
}

func (q *Queries) GetUserClubs(ctx context.Context, userID string) ([]GetUserClubsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserClubs, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserClubsRow
	for rows.Next() {
		var i GetUserClubsRow
		if err := rows.Scan(
			&i.ClubID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.BannerImage,
			&i.UserPoints,
			&i.UserStreak,
			&i.JoinedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserDisplay = `-- name: GetUserDisplay :one
SELECT username, profile_picture, created_at
FROM user
WHERE id = ?
`

type GetUserDisplayRow struct {
	Username       string    `json:"username"`
	ProfilePicture *string   `json:"profile_picture"`
	CreatedAt      time.Time `json:"created_at"`
}

func (q *Queries) GetUserDisplay(ctx context.Context, id string) (GetUserDisplayRow, error) {
	row := q.db.QueryRowContext(ctx, getUserDisplay, id)
	var i GetUserDisplayRow
	err := row.Scan(&i.Username, &i.ProfilePicture, &i.CreatedAt)
	return i, err
}

const getUserLoginByEmail = `-- name: GetUserLoginByEmail :one
SELECT id, email, username, password
FROM user
WHERE email = ?
`

type GetUserLoginByEmailRow struct {
	ID       string `json:"id"`
	Email    string `json:"email"`
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) GetUserLoginByEmail(ctx context.Context, email string) (GetUserLoginByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserLoginByEmail, email)
	var i GetUserLoginByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
	)
	return i, err
}

const getUserLoginByUsername = `-- name: GetUserLoginByUsername :one
SELECT id, email, username, password
FROM user
WHERE username = ?
`

type GetUserLoginByUsernameRow struct {
	ID       string `json:"id"`
	Email    string `json:"email"`
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) GetUserLoginByUsername(ctx context.Context, username string) (GetUserLoginByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, getUserLoginByUsername, username)
	var i GetUserLoginByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE user
SET
    email = COALESCE(?1, email),
    username = COALESCE(?2, username),
    password = COALESCE(?3, password),
    profile_picture = COALESCE(?4, profile_picture)
WHERE
    id = ?5
`

type UpdateUserParams struct {
	Email          *string `json:"email"`
	Username       *string `json:"username"`
	Password       *string `json:"password"`
	ProfilePicture *string `json:"profile_picture"`
	ID             string  `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Email,
		arg.Username,
		arg.Password,
		arg.ProfilePicture,
		arg.ID,
	)
	return err
}

const updateUserPrivateMessage = `-- name: UpdateUserPrivateMessage :exec
UPDATE user_private_message
SET
    content = COALESCE(?1, content)
WHERE
    id = ?2
`

type UpdateUserPrivateMessageParams struct {
	Content *string `json:"content"`
	ID      string  `json:"id"`
}

func (q *Queries) UpdateUserPrivateMessage(ctx context.Context, arg UpdateUserPrivateMessageParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPrivateMessage, arg.Content, arg.ID)
	return err
}
