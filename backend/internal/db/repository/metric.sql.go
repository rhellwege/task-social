// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: metric.sql

package repository

import (
	"context"
	"time"
)

const createMetric = `-- name: CreateMetric :exec
INSERT INTO metric (id, club_id, title, description, interval, start_at, unit, unit_is_integer, requires_verification)
VALUES (?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8, ?9)
`

type CreateMetricParams struct {
	ID                   string    `json:"id"`
	ClubID               string    `json:"club_id"`
	Title                string    `json:"title"`
	Description          string    `json:"description"`
	Interval             string    `json:"interval"`
	StartAt              time.Time `json:"start_at"`
	Unit                 string    `json:"unit"`
	UnitIsInteger        bool      `json:"unit_is_integer"`
	RequiresVerification bool      `json:"requires_verification"`
}

func (q *Queries) CreateMetric(ctx context.Context, arg CreateMetricParams) error {
	_, err := q.db.ExecContext(ctx, createMetric,
		arg.ID,
		arg.ClubID,
		arg.Title,
		arg.Description,
		arg.Interval,
		arg.StartAt,
		arg.Unit,
		arg.UnitIsInteger,
		arg.RequiresVerification,
	)
	return err
}

const createMetricEntry = `-- name: CreateMetricEntry :exec
INSERT INTO metric_entry (user_id, metric_instance_id, value)
VALUES (?1, ?2, ?3)
`

type CreateMetricEntryParams struct {
	UserID           string  `json:"user_id"`
	MetricInstanceID string  `json:"metric_instance_id"`
	Value            float64 `json:"value"`
}

func (q *Queries) CreateMetricEntry(ctx context.Context, arg CreateMetricEntryParams) error {
	_, err := q.db.ExecContext(ctx, createMetricEntry, arg.UserID, arg.MetricInstanceID, arg.Value)
	return err
}

const createMetricEntryAttachment = `-- name: CreateMetricEntryAttachment :exec
INSERT INTO metric_entry_attachment (id, entry_user_id, entry_metric_instance_id, url)
VALUES (?1, ?2, ?3, ?4)
`

type CreateMetricEntryAttachmentParams struct {
	ID                    string `json:"id"`
	EntryUserID           string `json:"entry_user_id"`
	EntryMetricInstanceID string `json:"entry_metric_instance_id"`
	Url                   string `json:"url"`
}

func (q *Queries) CreateMetricEntryAttachment(ctx context.Context, arg CreateMetricEntryAttachmentParams) error {
	_, err := q.db.ExecContext(ctx, createMetricEntryAttachment,
		arg.ID,
		arg.EntryUserID,
		arg.EntryMetricInstanceID,
		arg.Url,
	)
	return err
}

const createMetricEntryVerification = `-- name: CreateMetricEntryVerification :exec
INSERT INTO metric_entry_verification (entry_user_id, entry_metric_instance_id, verifier_user_id, verified, reason)
VALUES (?1, ?2, ?3, ?4, ?5)
`

type CreateMetricEntryVerificationParams struct {
	EntryUserID           string  `json:"entry_user_id"`
	EntryMetricInstanceID string  `json:"entry_metric_instance_id"`
	VerifierUserID        string  `json:"verifier_user_id"`
	Verified              bool    `json:"verified"`
	Reason                *string `json:"reason"`
}

func (q *Queries) CreateMetricEntryVerification(ctx context.Context, arg CreateMetricEntryVerificationParams) error {
	_, err := q.db.ExecContext(ctx, createMetricEntryVerification,
		arg.EntryUserID,
		arg.EntryMetricInstanceID,
		arg.VerifierUserID,
		arg.Verified,
		arg.Reason,
	)
	return err
}

const createMetricInstance = `-- name: CreateMetricInstance :exec
INSERT INTO metric_instance (id, metric_id, due_at)
VALUES (?1, ?2, ?3)
`

type CreateMetricInstanceParams struct {
	ID       string    `json:"id"`
	MetricID string    `json:"metric_id"`
	DueAt    time.Time `json:"due_at"`
}

func (q *Queries) CreateMetricInstance(ctx context.Context, arg CreateMetricInstanceParams) error {
	_, err := q.db.ExecContext(ctx, createMetricInstance, arg.ID, arg.MetricID, arg.DueAt)
	return err
}

const deleteMetric = `-- name: DeleteMetric :exec
DELETE FROM metric
WHERE
    id = ?1
`

func (q *Queries) DeleteMetric(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteMetric, id)
	return err
}

const deleteMetricEntry = `-- name: DeleteMetricEntry :exec
DELETE FROM metric_entry
WHERE
    user_id = ?1 AND metric_instance_id = ?2
`

type DeleteMetricEntryParams struct {
	UserID           string `json:"user_id"`
	MetricInstanceID string `json:"metric_instance_id"`
}

func (q *Queries) DeleteMetricEntry(ctx context.Context, arg DeleteMetricEntryParams) error {
	_, err := q.db.ExecContext(ctx, deleteMetricEntry, arg.UserID, arg.MetricInstanceID)
	return err
}

const deleteMetricEntryAttachment = `-- name: DeleteMetricEntryAttachment :exec
DELETE FROM metric_entry_attachment
WHERE
    id = ?1
`

func (q *Queries) DeleteMetricEntryAttachment(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteMetricEntryAttachment, id)
	return err
}

const deleteMetricEntryVerification = `-- name: DeleteMetricEntryVerification :exec
DELETE FROM metric_entry_verification
WHERE
    entry_user_id = ?1 AND entry_metric_instance_id = ?2 AND verifier_user_id = ?3
`

type DeleteMetricEntryVerificationParams struct {
	EntryUserID           string `json:"entry_user_id"`
	EntryMetricInstanceID string `json:"entry_metric_instance_id"`
	VerifierUserID        string `json:"verifier_user_id"`
}

func (q *Queries) DeleteMetricEntryVerification(ctx context.Context, arg DeleteMetricEntryVerificationParams) error {
	_, err := q.db.ExecContext(ctx, deleteMetricEntryVerification, arg.EntryUserID, arg.EntryMetricInstanceID, arg.VerifierUserID)
	return err
}

const deleteMetricInstance = `-- name: DeleteMetricInstance :exec
DELETE FROM metric_instance
WHERE
    id = ?1
`

func (q *Queries) DeleteMetricInstance(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteMetricInstance, id)
	return err
}

const getHistoricalMetricEntries = `-- name: GetHistoricalMetricEntries :many
SELECT metric_entry.user_id, metric_entry.metric_instance_id, metric_entry.value, metric_entry.created_at, metric_entry.updated_at FROM metric_entry
JOIN metric_instance ON metric_instance.id = metric_entry.metric_instance_id
WHERE metric_instance.metric_id = ?1
`

// get all entries for all instances of a given metric
func (q *Queries) GetHistoricalMetricEntries(ctx context.Context, metricID string) ([]MetricEntry, error) {
	rows, err := q.db.QueryContext(ctx, getHistoricalMetricEntries, metricID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MetricEntry
	for rows.Next() {
		var i MetricEntry
		if err := rows.Scan(
			&i.UserID,
			&i.MetricInstanceID,
			&i.Value,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestMetricInstance = `-- name: GetLatestMetricInstance :one
SELECT id, metric_id, due_at, created_at, updated_at FROM metric_instance WHERE metric_id = ? ORDER BY created_at DESC LIMIT 1
`

func (q *Queries) GetLatestMetricInstance(ctx context.Context, metricID string) (MetricInstance, error) {
	row := q.db.QueryRowContext(ctx, getLatestMetricInstance, metricID)
	var i MetricInstance
	err := row.Scan(
		&i.ID,
		&i.MetricID,
		&i.DueAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMetric = `-- name: GetMetric :one
SELECT id, club_id, title, description, interval, start_at, unit, unit_is_integer, requires_verification, created_at, updated_at FROM metric WHERE id = ?
`

func (q *Queries) GetMetric(ctx context.Context, id string) (Metric, error) {
	row := q.db.QueryRowContext(ctx, getMetric, id)
	var i Metric
	err := row.Scan(
		&i.ID,
		&i.ClubID,
		&i.Title,
		&i.Description,
		&i.Interval,
		&i.StartAt,
		&i.Unit,
		&i.UnitIsInteger,
		&i.RequiresVerification,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMetricEntries = `-- name: GetMetricEntries :many
SELECT user_id, metric_instance_id, value, created_at, updated_at FROM metric_entry WHERE metric_instance_id = ?1
`

func (q *Queries) GetMetricEntries(ctx context.Context, metricInstanceID string) ([]MetricEntry, error) {
	rows, err := q.db.QueryContext(ctx, getMetricEntries, metricInstanceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MetricEntry
	for rows.Next() {
		var i MetricEntry
		if err := rows.Scan(
			&i.UserID,
			&i.MetricInstanceID,
			&i.Value,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMetric = `-- name: UpdateMetric :exec
UPDATE metric
SET
    title = COALESCE(?1, title),
    description = COALESCE(?2, description),
    interval = COALESCE(?3, interval),
    start_at = COALESCE(?4, start_at),
    unit = COALESCE(?5, unit),
    unit_is_integer = COALESCE(?6, unit_is_integer),
    requires_verification = COALESCE(?7, requires_verification)
WHERE
    id = ?8
`

type UpdateMetricParams struct {
	Title                *string    `json:"title"`
	Description          *string    `json:"description"`
	Interval             *string    `json:"interval"`
	StartAt              *time.Time `json:"start_at"`
	Unit                 *string    `json:"unit"`
	UnitIsInteger        *bool      `json:"unit_is_integer"`
	RequiresVerification *bool      `json:"requires_verification"`
	ID                   string     `json:"id"`
}

func (q *Queries) UpdateMetric(ctx context.Context, arg UpdateMetricParams) error {
	_, err := q.db.ExecContext(ctx, updateMetric,
		arg.Title,
		arg.Description,
		arg.Interval,
		arg.StartAt,
		arg.Unit,
		arg.UnitIsInteger,
		arg.RequiresVerification,
		arg.ID,
	)
	return err
}

const updateMetricEntry = `-- name: UpdateMetricEntry :exec
UPDATE metric_entry
SET
    value = COALESCE(?1, value)
WHERE
    user_id = ?2 AND metric_instance_id = ?3
`

type UpdateMetricEntryParams struct {
	Value            *float64 `json:"value"`
	UserID           string   `json:"user_id"`
	MetricInstanceID string   `json:"metric_instance_id"`
}

func (q *Queries) UpdateMetricEntry(ctx context.Context, arg UpdateMetricEntryParams) error {
	_, err := q.db.ExecContext(ctx, updateMetricEntry, arg.Value, arg.UserID, arg.MetricInstanceID)
	return err
}

const updateMetricEntryAttachment = `-- name: UpdateMetricEntryAttachment :exec
UPDATE metric_entry_attachment
SET
    url = COALESCE(?1, url)
WHERE
    id = ?2
`

type UpdateMetricEntryAttachmentParams struct {
	Url *string `json:"url"`
	ID  string  `json:"id"`
}

func (q *Queries) UpdateMetricEntryAttachment(ctx context.Context, arg UpdateMetricEntryAttachmentParams) error {
	_, err := q.db.ExecContext(ctx, updateMetricEntryAttachment, arg.Url, arg.ID)
	return err
}

const updateMetricEntryVerification = `-- name: UpdateMetricEntryVerification :exec
UPDATE metric_entry_verification
SET
    verified = COALESCE(?1, verified),
    reason = COALESCE(?2, reason)
WHERE
    entry_user_id = ?3 AND entry_metric_instance_id = ?4 AND verifier_user_id = ?5
`

type UpdateMetricEntryVerificationParams struct {
	Verified              *bool   `json:"verified"`
	Reason                *string `json:"reason"`
	EntryUserID           string  `json:"entry_user_id"`
	EntryMetricInstanceID string  `json:"entry_metric_instance_id"`
	VerifierUserID        string  `json:"verifier_user_id"`
}

func (q *Queries) UpdateMetricEntryVerification(ctx context.Context, arg UpdateMetricEntryVerificationParams) error {
	_, err := q.db.ExecContext(ctx, updateMetricEntryVerification,
		arg.Verified,
		arg.Reason,
		arg.EntryUserID,
		arg.EntryMetricInstanceID,
		arg.VerifierUserID,
	)
	return err
}
