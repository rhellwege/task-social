// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: club.sql

package repository

import (
	"context"
	"time"
)

const createClub = `-- name: CreateClub :exec
INSERT INTO club (id, name, description, owner_user_id, banner_image, is_public)
VALUES (?1, ?2, ?3, ?4, ?5, ?6)
`

type CreateClubParams struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description"`
	OwnerUserID string  `json:"owner_user_id"`
	BannerImage *string `json:"banner_image"`
	IsPublic    bool    `json:"is_public"`
}

func (q *Queries) CreateClub(ctx context.Context, arg CreateClubParams) error {
	_, err := q.db.ExecContext(ctx, createClub,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.OwnerUserID,
		arg.BannerImage,
		arg.IsPublic,
	)
	return err
}

const createClubMembership = `-- name: CreateClubMembership :exec
INSERT INTO club_membership (user_id, club_id, is_moderator)
VALUES (?1, ?2, ?3)
`

type CreateClubMembershipParams struct {
	UserID      string `json:"user_id"`
	ClubID      string `json:"club_id"`
	IsModerator bool   `json:"is_moderator"`
}

func (q *Queries) CreateClubMembership(ctx context.Context, arg CreateClubMembershipParams) error {
	_, err := q.db.ExecContext(ctx, createClubMembership, arg.UserID, arg.ClubID, arg.IsModerator)
	return err
}

const createClubPost = `-- name: CreateClubPost :exec
INSERT INTO club_post (id, club_id, user_id, content)
VALUES (?1, ?2, ?3, ?4)
`

type CreateClubPostParams struct {
	ID      string `json:"id"`
	ClubID  string `json:"club_id"`
	UserID  string `json:"user_id"`
	Content string `json:"content"`
}

func (q *Queries) CreateClubPost(ctx context.Context, arg CreateClubPostParams) error {
	_, err := q.db.ExecContext(ctx, createClubPost,
		arg.ID,
		arg.ClubID,
		arg.UserID,
		arg.Content,
	)
	return err
}

const createClubPostAttachment = `-- name: CreateClubPostAttachment :exec
INSERT INTO club_post_attachment (id, post_id, url)
VALUES (?1, ?2, ?3)
`

type CreateClubPostAttachmentParams struct {
	ID     string `json:"id"`
	PostID string `json:"post_id"`
	Url    string `json:"url"`
}

func (q *Queries) CreateClubPostAttachment(ctx context.Context, arg CreateClubPostAttachmentParams) error {
	_, err := q.db.ExecContext(ctx, createClubPostAttachment, arg.ID, arg.PostID, arg.Url)
	return err
}

const deleteClub = `-- name: DeleteClub :exec
DELETE FROM club
WHERE
    id = ?1
`

func (q *Queries) DeleteClub(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteClub, id)
	return err
}

const deleteClubMembership = `-- name: DeleteClubMembership :exec
DELETE FROM club_membership
WHERE
    user_id = ?1 AND club_id = ?2
`

type DeleteClubMembershipParams struct {
	UserID string `json:"user_id"`
	ClubID string `json:"club_id"`
}

func (q *Queries) DeleteClubMembership(ctx context.Context, arg DeleteClubMembershipParams) error {
	_, err := q.db.ExecContext(ctx, deleteClubMembership, arg.UserID, arg.ClubID)
	return err
}

const deleteClubPost = `-- name: DeleteClubPost :exec
DELETE FROM club_post
WHERE
    id = ?1
`

func (q *Queries) DeleteClubPost(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteClubPost, id)
	return err
}

const deleteClubPostAttachment = `-- name: DeleteClubPostAttachment :exec
DELETE FROM club_post_attachment
WHERE
    id = ?1
`

func (q *Queries) DeleteClubPostAttachment(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteClubPostAttachment, id)
	return err
}

const getClub = `-- name: GetClub :one
SELECT id, name, description, owner_user_id, banner_image, is_public, created_at, updated_at FROM club WHERE id = ?1
`

func (q *Queries) GetClub(ctx context.Context, id string) (Club, error) {
	row := q.db.QueryRowContext(ctx, getClub, id)
	var i Club
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.OwnerUserID,
		&i.BannerImage,
		&i.IsPublic,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getClubLeaderboard = `-- name: GetClubLeaderboard :many
SELECT
    u.id, u.username, u.profile_picture,
    cm.user_points, cm.user_streak,
    cm.created_at AS joined_at
FROM
    club_membership cm
    JOIN user u ON cm.user_id = u.id
WHERE
    club_id = ?1
ORDER BY cm.user_points DESC, cm.user_streak DESC
`

type GetClubLeaderboardRow struct {
	ID             string    `json:"id"`
	Username       string    `json:"username"`
	ProfilePicture *string   `json:"profile_picture"`
	UserPoints     float64   `json:"user_points"`
	UserStreak     int64     `json:"user_streak"`
	JoinedAt       time.Time `json:"joined_at"`
}

func (q *Queries) GetClubLeaderboard(ctx context.Context, clubID string) ([]GetClubLeaderboardRow, error) {
	rows, err := q.db.QueryContext(ctx, getClubLeaderboard, clubID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetClubLeaderboardRow
	for rows.Next() {
		var i GetClubLeaderboardRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.ProfilePicture,
			&i.UserPoints,
			&i.UserStreak,
			&i.JoinedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClubMetrics = `-- name: GetClubMetrics :many
SELECT id, club_id, title, description, interval, unit, requires_verification, created_at, updated_at FROM metric
WHERE club_id = ?
`

func (q *Queries) GetClubMetrics(ctx context.Context, clubID string) ([]Metric, error) {
	rows, err := q.db.QueryContext(ctx, getClubMetrics, clubID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Metric
	for rows.Next() {
		var i Metric
		if err := rows.Scan(
			&i.ID,
			&i.ClubID,
			&i.Title,
			&i.Description,
			&i.Interval,
			&i.Unit,
			&i.RequiresVerification,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPublicClubs = `-- name: GetPublicClubs :many
SELECT id, name, description, owner_user_id, banner_image, is_public, created_at, updated_at FROM club
WHERE is_public = true
`

// TODO: Implement pagination with LIMIT and OFFSET
func (q *Queries) GetPublicClubs(ctx context.Context) ([]Club, error) {
	rows, err := q.db.QueryContext(ctx, getPublicClubs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Club
	for rows.Next() {
		var i Club
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.OwnerUserID,
			&i.BannerImage,
			&i.IsPublic,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isUserMemberOfClub = `-- name: IsUserMemberOfClub :one
SELECT EXISTS(SELECT 1 FROM club_membership WHERE user_id = ? AND club_id = ?)
`

type IsUserMemberOfClubParams struct {
	UserID string `json:"user_id"`
	ClubID string `json:"club_id"`
}

// returns boolean
func (q *Queries) IsUserMemberOfClub(ctx context.Context, arg IsUserMemberOfClubParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, isUserMemberOfClub, arg.UserID, arg.ClubID)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const isUserModeratorOfClub = `-- name: IsUserModeratorOfClub :one
SELECT is_moderator FROM club_membership WHERE user_id = ? AND club_id = ?
`

type IsUserModeratorOfClubParams struct {
	UserID string `json:"user_id"`
	ClubID string `json:"club_id"`
}

// returns boolean
func (q *Queries) IsUserModeratorOfClub(ctx context.Context, arg IsUserModeratorOfClubParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, isUserModeratorOfClub, arg.UserID, arg.ClubID)
	var is_moderator bool
	err := row.Scan(&is_moderator)
	return is_moderator, err
}

const isUserOwnerOfClub = `-- name: IsUserOwnerOfClub :one
SELECT EXISTS(SELECT 1 FROM club WHERE id = ?1 AND owner_user_id = ?2)
`

type IsUserOwnerOfClubParams struct {
	ClubID string `json:"club_id"`
	UserID string `json:"user_id"`
}

// returns boolean
func (q *Queries) IsUserOwnerOfClub(ctx context.Context, arg IsUserOwnerOfClubParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, isUserOwnerOfClub, arg.ClubID, arg.UserID)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const updateClub = `-- name: UpdateClub :exec
UPDATE club
SET
    name = COALESCE(?1, name),
    description = COALESCE(?2, description),
    owner_user_id = COALESCE(?3, owner_user_id),
    banner_image = COALESCE(?4, banner_image),
    is_public = COALESCE(?5, is_public)
WHERE
    id = ?6
`

type UpdateClubParams struct {
	Name        *string `json:"name"`
	Description *string `json:"description"`
	OwnerUserID *string `json:"owner_user_id"`
	BannerImage *string `json:"banner_image"`
	IsPublic    *bool   `json:"is_public"`
	ID          string  `json:"id"`
}

func (q *Queries) UpdateClub(ctx context.Context, arg UpdateClubParams) error {
	_, err := q.db.ExecContext(ctx, updateClub,
		arg.Name,
		arg.Description,
		arg.OwnerUserID,
		arg.BannerImage,
		arg.IsPublic,
		arg.ID,
	)
	return err
}

const updateClubMembership = `-- name: UpdateClubMembership :exec
UPDATE club_membership
SET
    user_points = COALESCE(?1, user_points),
    user_streak = COALESCE(?2, user_streak),
    is_moderator = COALESCE(?3, is_moderator)
WHERE
    user_id = ?4 AND club_id = ?5
`

type UpdateClubMembershipParams struct {
	UserPoints  *float64 `json:"user_points"`
	UserStreak  *int64   `json:"user_streak"`
	IsModerator *bool    `json:"is_moderator"`
	UserID      string   `json:"user_id"`
	ClubID      string   `json:"club_id"`
}

func (q *Queries) UpdateClubMembership(ctx context.Context, arg UpdateClubMembershipParams) error {
	_, err := q.db.ExecContext(ctx, updateClubMembership,
		arg.UserPoints,
		arg.UserStreak,
		arg.IsModerator,
		arg.UserID,
		arg.ClubID,
	)
	return err
}

const updateClubPost = `-- name: UpdateClubPost :exec
UPDATE club_post
SET
    content = COALESCE(?1, content)
WHERE
    id = ?2
`

type UpdateClubPostParams struct {
	Content *string `json:"content"`
	ID      string  `json:"id"`
}

func (q *Queries) UpdateClubPost(ctx context.Context, arg UpdateClubPostParams) error {
	_, err := q.db.ExecContext(ctx, updateClubPost, arg.Content, arg.ID)
	return err
}

const updateClubPostAttachment = `-- name: UpdateClubPostAttachment :exec
UPDATE club_post_attachment
SET
    url = COALESCE(?1, url)
WHERE
    id = ?2
`

type UpdateClubPostAttachmentParams struct {
	Url *string `json:"url"`
	ID  string  `json:"id"`
}

func (q *Queries) UpdateClubPostAttachment(ctx context.Context, arg UpdateClubPostAttachmentParams) error {
	_, err := q.db.ExecContext(ctx, updateClubPostAttachment, arg.Url, arg.ID)
	return err
}
